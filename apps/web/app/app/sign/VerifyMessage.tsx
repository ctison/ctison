import { Web3InputAddress } from '@/_ui/Web3InputAddress';
import { Button, Fieldset, Group, Textarea, Title } from '@mantine/core';
import { useForm } from '@mantine/form';
import { useMutation } from '@tanstack/react-query';
import { useMemo } from 'react';
import { isAddress, isHex, verifyMessage } from 'viem';
import { type History } from './page';

export const VerifyMessage: React.FC<{
  addHistory: (history: Omit<History, 'id' | 'date'>) => string;
  updateHistory: (id: string, history: Partial<History>) => void;
}> = ({ addHistory, updateHistory }) => {
  const form = useForm({
    initialValues: {
      address: '',
      message: '',
      signature: '',
    },
    validate: {
      address: (value) => (isAddress(value) ? null : 'Invalid address'),
      signature: (value) => (isHex(value) ? null : 'Invalid signature'),
    },
  });
  const { mutate: _verifyMessage, ...verifyMessageMutation } = useMutation({
    mutationFn: async (values: typeof form.values) => {
      return await verifyMessage({
        address: values.address as `0x${string}`,
        message: values.message,
        signature: values.signature as `0x${string}`,
      });
    },
    onMutate(variables) {
      const id = addHistory({
        type: 'verify',
        address: variables.address as `0x${string}`,
        message: variables.message,
        signature: variables.signature as `0x${string}`,
      });
      return { id };
    },
    onError(error) {
      form.setFieldError('signature', error.message);
    },
    onSettled(result, error, _, ctx) {
      updateHistory(ctx!.id, {
        valid: result,
        error,
      });
    },
  });

  return (
    <form
      onSubmit={useMemo(
        () =>
          form.onSubmit((values) => {
            _verifyMessage(values);
          }),
        [form, _verifyMessage],
      )}
    >
      <Fieldset legend='Verify a message'>
        <Web3InputAddress
          setAddress={(address) => {
            form.setFieldValue('address', address);
          }}
          disabled={verifyMessageMutation.isPending}
          description='The Ethereum address that signed the original message.'
          {...form.getInputProps('address')}
        />

        <Textarea
          label='Message'
          description='The message to be verified.'
          placeholder='Type a message here.'
          disabled={verifyMessageMutation.isPending}
          {...form.getInputProps('message')}
        />
        <Textarea
          label='Signature'
          description="The signature that was generated by signing the message with the address's private key."
          placeholder='Type a signature here.'
          disabled={verifyMessageMutation.isPending}
          {...form.getInputProps('signature')}
        />
        <Group>
          <Button
            miw={124}
            mt='lg'
            type='submit'
            loading={verifyMessageMutation.isPending}
          >
            Verify
          </Button>
          {verifyMessageMutation.data !== undefined && (
            <Title mt='lg' size='sm'>
              {verifyMessageMutation.data ? '✅ Valid' : '❌ Invalid'}
            </Title>
          )}
        </Group>
      </Fieldset>
    </form>
  );
};
