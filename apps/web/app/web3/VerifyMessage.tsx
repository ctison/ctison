'use client';

import { Button, Group, Textarea, Title } from '@mantine/core';
import { useForm } from '@mantine/form';
import { useMutation } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';
import { isAddress, isHex, verifyMessage } from 'viem';
import { InputAddress } from '../_ui/InputAddress';

export const VerifyMessage: React.FC = () => {
  const form = useForm({
    initialValues: {
      address: '',
      message: '',
      signature: '',
    },
    validate: {
      address: (value) => (isAddress(value) ? null : 'Invalid address'),
      signature: (value) => (isHex(value) ? null : 'Invalid signature'),
    },
  });
  const verifyMessageMutation = useMutation({
    mutationFn: async (values: typeof form.values) => {
      return await verifyMessage({
        address: values.address as `0x${string}`,
        message: values.message,
        signature: values.signature as `0x${string}`,
      });
    },
    onError(error) {
      form.setFieldError('signature', error.message);
    },
  });

  return (
    <form
      onSubmit={useMemo(
        () => form.onSubmit((values) => verifyMessageMutation.mutate(values)),
        [form, verifyMessageMutation],
      )}
    >
      <Title mb='lg'>Verify a message</Title>
      <InputAddress
        setAddress={useCallback(
          (address) => form.setFieldValue('address', address),
          [form],
        )}
        disabled={verifyMessageMutation.isPending}
        description='The Ethereum address that signed the original message.'
        {...form.getInputProps('address')}
      />

      <Textarea
        label='Message'
        description='The message to be verified.'
        placeholder='Type a message here.'
        disabled={verifyMessageMutation.isPending}
        {...form.getInputProps('message')}
      />
      <Textarea
        label='Signature'
        description="The signature that was generated by signing the message with the address's private key."
        placeholder='Type a signature here.'
        disabled={verifyMessageMutation.isPending}
        {...form.getInputProps('signature')}
      />
      <Group>
        <Button
          miw={124}
          mt='lg'
          type='submit'
          loading={verifyMessageMutation.isPending}
        >
          Verify
        </Button>
        {verifyMessageMutation.data !== undefined && (
          <Title mt='lg' size='sm'>
            {verifyMessageMutation.data ? '✅ Valid' : '❌ Invalid'}
          </Title>
        )}
      </Group>
    </form>
  );
};
