'use client';

import '@mantine/code-highlight/styles.css';
import { Button, Group, Textarea, Title } from '@mantine/core';
import { useForm } from '@mantine/form';
import { useCallback, useState } from 'react';
import { isAddress, isHex, verifyMessage } from 'viem';
import { InputAddress } from '../_ui/InputAddress';

export const VerifyMessage: React.FC = () => {
  const form = useForm({
    initialValues: {
      address: '',
      message: '',
      signature: '',
    },
    validate: {
      address: (value) => (isAddress(value) ? null : 'Invalid address'),
      signature: (value) => (isHex(value) ? null : 'Invalid signature'),
    },
  });

  const [result, setResult] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const setAddress = useCallback(
    (address: string) => {
      form.setFieldValue('address', address);
    },
    [form],
  );

  return (
    <form
      onSubmit={form.onSubmit(async (values) => {
        setResult(null);
        setIsLoading(true);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        try {
          const result = await verifyMessage({
            address: values.address as `0x${string}`,
            message: values.message,
            signature: values.signature as `0x${string}`,
          });
          setResult(result);
        } catch (error) {
          form.setFieldError('signature', (error as Error).message);
          setResult(false);
        }
        setIsLoading(false);
      })}
    >
      <Title my='lg'>Verify a message</Title>
      <InputAddress
        setAddress={setAddress}
        disabled={isLoading}
        description='The Ethereum address that signed the original message.'
        {...form.getInputProps('address')}
      />

      <Textarea
        label='Message'
        description='The message to be verified.'
        placeholder='Type a message here.'
        disabled={isLoading}
        {...form.getInputProps('message')}
      />
      <Textarea
        label='Signature'
        description="The signature that was generated by signing the message with the address's private key."
        placeholder='Type a signature here.'
        disabled={isLoading}
        {...form.getInputProps('signature')}
      />
      <Group>
        <Button miw={124} mt='lg' type='submit' loading={isLoading}>
          Verify
        </Button>
        {result !== null && (
          <Title mt='lg' size='sm'>
            {result ? '✅' : '❌'} {result ? 'Valid' : 'Invalid'}
          </Title>
        )}
      </Group>
    </form>
  );
};
